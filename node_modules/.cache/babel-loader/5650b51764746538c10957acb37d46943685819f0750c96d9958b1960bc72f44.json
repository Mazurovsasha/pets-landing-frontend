{"ast":null,"code":"import React,{createContext,useState,useContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(undefined);// here it shows that the value either exists or it doesn’t, and if not, undefined is passed as default\nexport const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(true);const toggleTheme=()=>{setTheme(!theme);document.documentElement.classList.toggle(\"dark\");};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","jsx","_jsx","ThemeContext","undefined","useTheme","context","Error","ThemeProvider","_ref","children","theme","setTheme","toggleTheme","document","documentElement","classList","toggle","Provider","value"],"sources":["/home/runner/work/pets-landing-frontend/pets-landing-frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react'\n\ninterface ThemeContextType {\n  theme: boolean\n  toggleTheme: () => void\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode // ReactNode is a type that is used to define all possible metrics that can be passed as a children component.\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined) // here it shows that the value either exists or it doesn’t, and if not, undefined is passed as default\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useState(true)\n\n  const toggleTheme = () => {\n    setTheme(!theme)\n    document.documentElement.classList.toggle(\"dark\")\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAmB,OAAO,QAAAC,GAAA,IAAAC,IAAA,yBAW7E,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAA+BM,SAAS,CAAC,CAAC;AAE5E,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGN,UAAU,CAACG,YAAY,CAAC,CACxC,GAAI,CAACG,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,aAA2C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtE,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAc,WAAW,CAAGA,CAAA,GAAM,CACxBD,QAAQ,CAAC,CAACD,KAAK,CAAC,CAChBG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,CAAC,CACnD,CAAC,CAED,mBACEf,IAAA,CAACC,YAAY,CAACe,QAAQ,EAACC,KAAK,CAAE,CAAER,KAAK,CAAEE,WAAY,CAAE,CAAAH,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}